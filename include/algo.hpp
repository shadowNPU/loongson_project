#pragma once

#include <opencv2/opencv.hpp>


static constexpr double NaN = std::numeric_limits<double>::quiet_NaN();
const double PI = 3.14159265358979323846;
const int g_N = 7;

// Zernike模板（矩阵）M00、M11R、M11I、M20、M31R、M31I、M40
static cv::Mat M00 = (
    cv::Mat_<double>(7, 7) <<
    0, 0.0287, 0.0686, 0.0807, 0.0686, 0.0287, 0,
    0.0287, 0.0815, 0.0816, 0.0816, 0.0816, 0.0815, 0.0287,
    0.0686, 0.0816, 0.0816, 0.0816, 0.0816, 0.0816, 0.0686,
    0.0807, 0.0816, 0.0816, 0.0816, 0.0816, 0.0816, 0.0807,
    0.0686, 0.0816, 0.0816, 0.0816, 0.0816, 0.0816, 0.0686,
    0.0287, 0.0815, 0.0816, 0.0816, 0.0816, 0.0815, 0.0287,
    0, 0.0287, 0.0686, 0.0807, 0.0686, 0.0287, 0);

static cv::Mat M11R = (
    cv::Mat_<double>(7, 7) <<
    0, -0.015, -0.019, 0, 0.019, 0.015, 0,
    -0.0224, -0.0466, -0.0233, 0, 0.0233, 0.0466, 0.0224,
    -0.0573, -0.0466, -0.0233, 0, 0.0233, 0.0466, 0.0573,
    -0.069, -0.0466, -0.0233, 0, 0.0233, 0.0466, 0.069,
    -0.0573, -0.0466, -0.0233, 0, 0.0233, 0.0466, 0.0573,
    -0.0224, -0.0466, -0.0233, 0, 0.0233, 0.0466, 0.0224,
    0, -0.015, -0.019, 0, 0.019, 0.015, 0);

static cv::Mat M11I = (
    cv::Mat_<double>(7, 7) <<
    0, -0.0224, -0.0573, -0.069, -0.0573, -0.0224, 0,
    -0.015, -0.0466, -0.0466, -0.0466, -0.0466, -0.0466, -0.015,
    -0.019, -0.0233, -0.0233, -0.0233, -0.0233, -0.0233, -0.019,
    0, 0, 0, 0, 0, 0, 0,
    0.019, 0.0233, 0.0233, 0.0233, 0.0233, 0.0233, 0.019,
    0.015, 0.0466, 0.0466, 0.0466, 0.0466, 0.0466, 0.015,
    0, 0.0224, 0.0573, 0.069, 0.0573, 0.0224, 0);

static cv::Mat M20 = (
    cv::Mat_<double>(7, 7) <<
    0, 0.0225, 0.0394, 0.0396, 0.0394, 0.0225, 0,
    0.0225, 0.0271, -0.0128, -0.0261, -0.0128, 0.0271, 0.0225,
    0.0394, -0.0128, -0.0528, -0.0661, -0.0528, -0.0128, 0.0394,
    0.0396, -0.0261, -0.0661, -0.0794, -0.0661, -0.0261, 0.0396,
    0.0394, -0.0128, -0.0528, -0.0661, -0.0528, -0.0128, 0.0394,
    0.0225, 0.0271, -0.0128, -0.0261, -0.0128, 0.0271, 0.0225,
    0, 0.0225, 0.0394, 0.0396, 0.0394, 0.0225, 0);

static cv::Mat M31R = (
    cv::Mat_<double>(7, 7) <<
    0, -0.0103, -0.0073, 0, 0.0073, 0.0103, 0,
    -0.0153, -0.0018, 0.0162, 0, -0.0162, 0.0018, 0.0153,
    -0.0223, 0.0324, 0.0333, 0, -0.0333, -0.0324, 0.0223,
    -0.0190, 0.0438, 0.0390, 0, -0.0390, -0.0438, 0.0190,
    -0.0223, 0.0324, 0.0333, 0, -0.0333, -0.0324, 0.0223,
    -0.0153, -0.0018, 0.0162, 0, -0.0162, 0.0018, 0.0153,
    0, -0.0103, -0.0073, 0, 0.0073, 0.0103, 0);

static cv::Mat M31I = (
    cv::Mat_<double>(7, 7) <<
    0, -0.0153, -0.0223, -0.019, -0.0223, -0.0153, 0,
    -0.0103, -0.0018, 0.0324, 0.0438, 0.0324, -0.0018, -0.0103,
    -0.0073, 0.0162, 0.0333, 0.039, 0.0333, 0.0162, -0.0073,
    0, 0, 0, 0, 0, 0, 0,
    0.0073, -0.0162, -0.0333, -0.039, -0.0333, -0.0162, 0.0073,
    0.0103, 0.0018, -0.0324, -0.0438, -0.0324, 0.0018, 0.0103,
    0, 0.0153, 0.0223, 0.0190, 0.0223, 0.0153, 0);

static cv::Mat M40 = (
    cv::Mat_<double>(7, 7) <<
    0, 0.013, 0.0056, -0.0018, 0.0056, 0.013, 0,
    0.0130, -0.0186, -0.0323, -0.0239, -0.0323, -0.0186, 0.0130,
    0.0056, -0.0323, 0.0125, 0.0406, 0.0125, -0.0323, 0.0056,
    -0.0018, -0.0239, 0.0406, 0.0751, 0.0406, -0.0239, -0.0018,
    0.0056, -0.0323, 0.0125, 0.0406, 0.0125, -0.0323, 0.0056,
    0.0130, -0.0186, -0.0323, -0.0239, -0.0323, -0.0186, 0.0130,
    0, 0.013, 0.0056, -0.0018, 0.0056, 0.013, 0);


double computeX(cv::Mat const &image,
                int closingSize,
                int gaussSize,
                double threshold,
                double maxAera,
                double minAera);
